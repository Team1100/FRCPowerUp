package org.usfirst.frc.team1100.robot.subsystems.vision;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.opencv.core.Mat;


/**
 * This subsystem is used to detect power cubes
 */
public class Vision extends Subsystem {

    /**
     * THe singular instance of the Vision subsystem
     */
	private static Vision v;
	/**
	 * Boolean that represents whether or not contours need to be processed.
	 * This boolean is checked in the Thread in Robot.java
	 */
	public boolean imgRequest = false;
	/**
	 * The instance of the pipeline generated by GRIP
	 */
	private GripPipeline grip;
	/**
	 * The center X value of the contour(power cube) detected by grip
	 */
	double centerX;
	
	/**
	 * Gets the singular instance of the Vision subsystem
	 * @return the singular instance of the Vision subsystem
	 */
	public static Vision getInstance() {
		if (v == null) v = new Vision();
		return v;
	}
	
	/**
	 * Called by getInstance() the first time 
	 */
	private Vision() {
		grip = new GripPipeline();
	}
	
	/**
	 * Checks to make sure image can be processed, then calls Pipeline's process()
	 * @param image created by CvSink.captureFrame() from Robot.java, image to be processed
	 */
	public void process(Mat image) {
		if(grip == null) {
			System.err.println("Vision getInstance() not called, no pipeline created");
		}
		if(image == null) {
			System.err.println("Null image provided for Vision to process");
		}
		imgRequest = false;
		grip.process(image);
	}
	
	/**
	 * return Boolean representing state of image request. True = requested, false = not requested
	 */
	public synchronized boolean isImageRequested() {
		return imgRequest;
	}
	
	
	/**
	 * unused
	 */
    public void initDefaultCommand() {
        
    }
    
    /**
     * Called by commands for vision to take picture, process contours
     */
	public synchronized void request() {
		imgRequest = true;
	} 
	
	/**
	 * Calculates whether there are any contours/hulls detected in image
	 * @return boolean representing state of hulls in image
	 */
	public synchronized boolean noHulls() {
		return grip.convexHullsOutput().isEmpty();
	}
	
	/**
	 * Calculates center X value of power cube contour
	 * @return center X value of power cube contour
	 */
	public synchronized double getCenterX() {
		return grip.getCenteroid(grip.convexHullsOutput().get(0)).x;
	}
}

